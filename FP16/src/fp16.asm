; IEEE 754-2008 HALF-FLOAT LIBRARY FOR INTEL 8080/8085 CPU
; COPYRIGHT (C) VITALY LUNYOV 2016,2019
;
; SEEEEEMM:MMMMMMMM
;
; INPUTS:
;   HL - OP1
;   DE - OP2
; OUTPUT:
;   HL - RESULT
;
; *** MAIN SUBROUTINES / LIMITED SUBNORMAL FP16 SUPPORT (2016) ***
; F16ADD - 732 CYCLES*
; F16SUB - 854 CYCLES
; F16MUL - 1783 CYCLES
; F16DIV - 2366 CYCLES
;
; F16ABS
; F16NEG
; F16CMP - (OP1=OP2)?Z=1:((OP1>OP2)?CY=0:CY=1) 
; F16INT - SIGNED [-32768, 32767], UNSIGNED [0, 65519]; NO OVERFLOW HANDLING
;          1128 CYCLES
; INTF16 - UNSIGNED
;          493 CYCLES
;
; PRECISION ERRORS:
; 0% - 7167, <.01% - 39066, .02% - 9542, .03% - 7188, .04% - 2285, .05% - 288
;
; *** SERVICE SUBROUTINES (2019) ***
; STRINT - STRING -> UNSIGNED INT
; INTSTR - UNSIGNED INT -> STRING
; STRF16 - STRING -> FP16 (UNSIGNED)
; F16STR - FP16 -> STRING
; A2F16  - A=0..10 -> FP16
;
; *AVERAGE CPU CYCLES
;
ORG 100H
JMP F16TST
FADD:
JMP F16ADD
FSUB:
JMP F16SUB
FMUL:
JMP F16MUL
FDIV:
JMP F16DIV
;
; CONSTANTS
;
F16_E:EQU 4170H
F16_PI:EQU 4248H
;
BDOS:EQU 5 ; CP/M CALL
;
F16SM:EQU 80H ; SIGN MASK
F16EM:EQU 7CH ; EXPONENT MASK
F16MM:EQU 3   ; MANTISSA MASK
F16MB:EQU 11  ; MANTISSA BITS
F16BIA:EQU 15 ; EXPONENT BIAS
F16UEM:EQU F16BIA+F16BIA+1 ; UNPACKED EXP MASK
F16MI1:EQU F16MM+1 ; MANTISSA IMPLICIT 1
F16FDL:EQU 3  ; FRACTION DIGITS LIMIT
;
F16SUB: ; 4B / 22C + 26C
XCHG
CALL F16NEG
F16ADD:
MVI A,F16SM-1
ANA D
ORA E
RZ ; DE=0, HL UNCHANGED
XCHG
MVI A,F16SM-1
ANA D
ORA E
RZ
PUSH H
MOV A,H
XRA D
MOV L,A
XTHL ; SIGNS MAGIC
CALL F16UNP
SUB C ; EXP DIFF
JNC F16A1 ; E1 >= E2
MOV B,C
CMA
INR A 
MOV C,A
XCHG
XTHL
MOV A,H
XRA L
MOV H,A
XTHL
MOV A,C
F16A1:
XCHG
MOV C,A ; ABS(E1-E2)
CALL DIV2XC ; DENORMALIZE LOWER MANTISSA
POP PSW
MOV C,A
CM NEG16 ; SUBSTRACT HL IF SIGNS WERE DIFFERENT
DAD D
MOV D,C
JP F16DNP
JC F16NRP
CALL NEG16
MVI A,F16SM
XRA D
MOV D,A
F16NRP:
CALL F16NRM
RC ; RETURN ZERO
F16PCK: ; D - SIGN, B - EXP, HL - MANTISSA
MVI A,F16MM
ANA H
MOV H,A
MOV A,B
RLC
RLC
CPI F16EM
JNC F16INF ; SIGNED INFINITY
ORA H
MOV H,A
F16SGN:
MVI A,F16SM ; SET RESULT SIGN
ANA D
ORA H
MOV H,A
RET
F16UNP:
XCHG
CALL F16UPH
MOV C,B
XCHG
F16UPH:
MVI A,F16EM
ANA H
RRC
RRC
MOV B,A
MVI A,F16MM
ANA H
ORI F16MI1 ; RESTORE MANTISSA IMPLICIT 1
MOV H,A
MOV A,B
ORA A
RNZ
MVI A,F16MI1 ; SUBNORMAL
XRA H
MOV H,A
MOV A,B
RET
F16DNP: ; DIV2/NORM AND PACK
PUSH H
LXI H,F16PCK
XTHL
MVI A,F16MI1+F16MI1
ANA H
RZ
DIV2X2:
INR B
DIV2X1:
MVI C,1
DIV2XC:
MOV A,C
ORA A
RZ
CPI F16MB
JNC F16ZRO
DIV2C1:
MOV A,H
ORA A ; CY=0
RAR
MOV H,A
MOV A,L
RAR
MOV L,A
DCR C
JNZ DIV2C1
RNC
INX H ; ROUND THE RESULT
MVI A,F16MI1+F16MI1 ; CHECK FOR MANTISSA OVERFLOW
ANA H
RZ
JMP DIV2X2
F16NRM: ; 17B / 24:38:60:454C
MOV A,H
ORA L
STC
RZ  ; ZERO -> CY=1 / 24C
MOV A,B
ORA A
RZ  ; SUBNORMAL / 38C
F16N1:
MVI A,F16MI1
ANA H
RNZ ; NORMALIZED / 22..416C
DAD H
DCR B
JNZ F16N1
RET ; SUBNORMAL
F16MUL:
MVI A,F16SM-1
ANA H
ORA L
RZ ; ZERO
XCHG
MVI A,F16SM-1
ANA H
ORA L
RZ
MOV A,H
XRA D
PUSH PSW ; RESULT SIGN
CALL F16UNP
ADD C
SUI F16BIA
JC F16ZRS
JZ F16ZRS
CPI F16UEM
JNC F16OFL
PUSH PSW ; RESULT EXPONENT
MOV B,H
MOV C,L
LXI H,0
MVI A,F16MB
F16M1:
PUSH PSW
MOV A,H
ORA A
RAR
MOV H,A
MOV A,L
RAR
MOV L,A
MOV A,B
RAR
MOV B,A
MOV A,C
RAR
MOV C,A
JNC F16M2
DAD D
F16M2:
POP PSW
DCR A
JNZ F16M1
POP B
POP D
JMP F16DNP
F16DIV:
MOV A,H
XRA D
PUSH PSW ; RESULT SIGN
MVI A,F16SM-1
ANA D
ORA E
JZ F16OFL
MVI A,F16SM-1
ANA H
ORA L
JZ F16ZRS
CALL F16UNP
SUB C
ADI F16BIA
JM F16ZRS
JZ F16ZRS
CPI F16UEM
JNC F16OFL
PUSH PSW ; RESULT EXPONENT 
CALL F16CPM
JNC F16D3
DAD H
XTHL
DCR H
XTHL
F16D3:
XCHG
CALL NEG16
MVI A,F16MB+1
LXI B,0
F16D1:
PUSH PSW
PUSH H
DAD D
JNC F16D2
XCHG
F16D2:
POP H
MOV A,C
RAL
MOV C,A
MOV A,B
RAL
MOV B,A
XCHG
DAD H
XCHG
POP PSW
DCR A
JNZ F16D1
MOV H,B
MOV L,C
POP B
POP D
MVI A,F16MI1+F16MI1
ANA H
CNZ DIV2X1
JMP F16NRP
F16SQR:
RET
F16RND:
RET
F16ABS:
MOV A,H
ORA A
RP
F16NEG: ; 5B / 26C
MVI A,F16SM
XRA H
MOV H,A
RET
F16CMP:
MVI A,F16EM
ANA D
MOV B,A
MVI A,F16EM
ANA H
CMP B
RNZ ; E1<E2 -> CY=1, E1>E2 -> CY=0
F16CPM:
MVI A,F16MM
ANA D
MOV B,A
MVI A,F16MM
ANA H
CMP B
RNZ
MOV A,L
CMP E
RET
F16OFL: ; SIGNED OVERFLOW
POP D
F16INF: ; SIGNED INFINITY
MVI H,F16EM
MVI L,0 ; TODO: NAN
JMP F16SGN
F16ZRS: ; SKIP SIGN ZERO
POP PSW
F16ZRO: ; UNSIGNED ZERO
LXI H,0
RET
F16INT: ; NO SIGNED OVERFLOW HANDLING
XCHG
LXI H,0
MVI A,F16EM
ANA D
RRC
RRC
SUI F16BIA
RC
INR A
MOV B,A
MVI A,F16MI1
ORA D
MOV D,A
PUSH PSW
F162I1:
DAD H
MVI A,F16MI1
ANA D
JZ F162I2
INX H
F162I2:
XCHG
DAD H
XCHG
DCR B
JNZ F162I1
POP PSW
RP
NEG16: ; HL=-HL - 8B / 43C
MOV A,L
CMA
MOV L,A
MOV A,H
CMA
MOV H,A
INX H
RET
INTF16: ; UNSIGNED
MOV A,H
ORA L
RZ
LXI B,F16PCK
PUSH B
MVI B,F16MB+F16BIA-1
MVI D,0
MOV A,H
CPI F16MI1
JC F16NRM ; NORMALIZE
MVI C,16-F16MB+1
I2F161:
DCR C
RLC
JNC I2F161
MOV A,B
ADD C
MOV B,A
JMP DIV2XC
; **************************** SERVICE SUBROUTINES ****************************
; INPUTS: HL - STRING BUFFER, C - DIGITS LIMIT
; OUTPUT: HL - RESULT, DE - STRING BUFFER END, C - LIMIT LEFT
; CY=1 && A=-2 - DECIMAL '.'
STRINT:
LXI D,0
XCHG
S2I2:
INR C
S2I1:
LDAX D
INX D
ORA A
RZ
SUI '0'
RC
CPI 10
RNC
DCR C
JZ S2I2 ; SKIP DIGITS OVER LIMIT
PUSH B
MOV B,H
MOV C,L
DAD H
DAD H
DAD B
DAD H
MOV C,A
MVI B,0
DAD B ; HL = HL*10 + A
POP B
JMP S2I1
;
; INPUT: HL - STRING BUFFER
; OUTPUT: HL - FP16
STRF16:
MVI C,-1
CALL STRINT
PUSH H
S2F162:
LXI H,0
JNC S2F161
CPI '.'-'0' ; DECIMAL '.'
JNZ S2F161
XCHG
MVI C,F16FDL ; FRACTION DIGITS LIMIT [3]
CALL STRINT
MVI A,F16FDL+1
SUB C
JZ S2F162
MOV C,A ; C - FRACTION DIGITS COUNT (1..3)
PUSH B
CALL INTF16
XTHL
MVI H,0
DAD H
LXI D,F16X10
DAD D
MOV E,M
INX H
MOV D,M ; DE - FP16 10^C FROM TABLE
POP H   ; HL - FP16 FRACTION*10^C
CALL F16DIV
S2F161: ; HL - FP16 FRACTION
XTHL
CALL INTF16
POP D
JMP F16ADD
;
; INPUTS: HL - UNSIGNED INTEGER, DE - STRING BUFFER, A - '0' OR '1'
; OUTPUT: HL - INTACT, DE - STRING BUFFER END, NULL TERMINATED
INTSTR:
PUSH H
LXI B,-10000
CALL HDIVB
LXI B,-1000
CALL HDIVB
FRAC3D: ; 3 DIGITS OF FRACTION
LXI B,-100
CALL HDIVB
LXI B,-10
CALL HDIVB
MVI A,'0'
ADD L
STAX D
INX D
XRA A
STAX D ; EOS
POP H
RET
;
; HL / BC
; INPUTS: HL, DE, BC, A
; OUTPUT: HL, DE, A
HDIVB:
PUSH PSW
MVI A,'0'-1
HDB1:
DAD B
INR A
JC HDB1
XTHL
CMP H
JC HDB2 ; SKIP LEADING '0'
MVI H,'0'
STAX D
INX D
HDB2:
XTHL
MOV A,B
CMA
MOV B,A
MOV A,C
CMA
MOV C,A
INX B
DAD B
POP PSW
RET
;
; INPUTS: HL - FP16, DE - STRING BUFFER
; OUTPUT: DE - STRING BUFFER END
F16STR:
MOV A,H
ORA A
JP F16S1
MVI A,'-' 
STAX D
INX D
CALL F16NEG
F16S1:
PUSH H
PUSH D
CALL F16INT
POP D
MVI A,'1' ; SKIP LEADING '0'
CALL INTSTR
XCHG ; HL - BUFFER, DE - INT(HL)
XTHL ; TOS - BUFFER, HL - FP16 NUMBER
XCHG ; HL - INT(HL), DE - FP16 NUMBER
PUSH D
CALL INTF16
XCHG
POP H
CALL F16SUB
XCHG
LHLD F16X10+6 ; FP16(1000)
CALL F16MUL
CALL F16INT
POP D
MOV A,H
ORA L
RZ
MVI A,'.'
STAX D
INX D
MVI A,'0'
PUSH H
LXI H,F16S2
XTHL
PUSH H
JMP FRAC3D
F16S3:
STAX D
F16S2: ; TRIM TRAILING ZEROS OF FRACTION
DCX D
LDAX D
SUI '0'
JZ F16S3
SUI '.'-'0'
JNZ F16S4
STAX D
F16S4:
INX D
RET
;
A2F16: ; A=0..10 / 25B / 72C
MOV C,A
MVI B,0
LXI H,A2F16T
DAD B
MOV A,M
RAR
MOV H,A
MOV A,B
RAR
MOV L,A
RET
; PACKED FP16 - 0..10
A2F16T:
DB 0,78H,80H,84H,88H,8AH,8CH,8EH,90H,91H,92H
; 10^X TABLE, X=0..4
F16X10:
DW 3C00H,4900H,5640H,63D0H,70D2H
;
; *** TEST SET ***
;
BDSTR:
MOV A,H
CALL HEXBYTE
MOV A,L
CALL HEXBYTE
MVI A,' '
CALL CHR
LXI D,BUFFER
PUSH D
CALL F16STR
MVI A,13
STAX D
INX D
MVI A,10
STAX D
INX D
MVI A,'$'
STAX D
POP D
MVI C,9
JMP BDOS
;
HEXBYTE:
PUSH PSW
RRC
RRC
RRC
RRC
CALL HEXNBL
POP PSW
HEXNBL:
ANI 0FH
ADI '0'
CPI ':'
JC CHR
ADI 7
;
CHR:
PUSH B
PUSH D
PUSH H
MVI C,2
MOV E,A
CALL BDOS
POP H
POP D
POP B
RET
;
F16TST:
LXI H,STR_PI
CALL STRF16
CALL BDSTR
LXI H,STR_E
CALL STRF16
CALL BDSTR
LXI H,STR_4_5
CALL STRF16
CALL BDSTR
LXI H,STR_N
CALL STRF16
CALL BDSTR
HLT
;
STR_PI:
DB '3.142',0
STR_E:
DB '2.718',0
STR_4_5:
DB '4.5',0
STR_N:
DB '1975',0
BUFFER:
DB 0
